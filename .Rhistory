tj_aov_dat <- do.call(rbind,
lapply(1:length(exp_strs),
function(x) convert_aov_to_df(tj_aovs[[x]],
exp_strs[x])))
write.csv(tj_aov_dat, paste(res_path, 'task_jumps_aov.csv'), row.names=FALSE)
train_post_hoc_cs <- list("stable" = c(-1, 0, 1, 0), # switch > stay for stable group
"variable" = c(0, -1, 0, 1),
"grp_stay" = c(-1, 1, 0, 0), # var > stab
"grp_switch" = c(0, 0, -1, 1))
tj_emm_int_lt <- emmeans(tj_aovs[["lt"]], c("train_type", "switch"))
tj_contrasts_lt <- contrast(tj_emm_int_lt, train_post_hoc_cs, adjust="scheffe")
write.csv(tj_contrasts_lt, paste(res_path, 'task_jumps_post_hoc.csv'), row.names=FALSE)
# first set the factors to be factors
jumps$sub <- as.factor(jumps$sub)
jumps$train_type <- as.factor(jumps$train_type)
levels(jumps$train_type) <- c('stable','variable')
jumps$switch <- as.factor(jumps$switch)
levels(jumps$switch) <- c('stay','switch')
# now run the ANOVA model
# set emmeans option to multivariate
afex_options(emmeans_model = "multivariate")
# perform the statistical model
exp_strs <- unique(jumps$exp)
tj_aovs <- lapply(exp_strs, function(x)
aov_ez("sub", "jumps", jumps %>% filter(exp == x),
within = "switch",
between = "train_type"))
names(tj_aovs) <- exp_strs
# convert the anovas to a dataframe, save the results and show as a table
convert_aov_to_df <- function(aovl, exp_str){
ref = aovl$anova_table
tibble(exp = rep(exp_str, length(ref$F)),
effect = rownames(ref),
numDF = ref$`num Df`,
denDF = ref$`den Df`,
Fstat = ref$F,
ges = ref$ges,
p = ref$`Pr(>F)`)
}
tj_aov_dat <- do.call(rbind,
lapply(1:length(exp_strs),
function(x) convert_aov_to_df(tj_aovs[[x]],
exp_strs[x])))
write.csv(tj_aov_dat, paste(res_path, 'task_jumps_aov.csv', sep=""), row.names=FALSE)
tj_emm_int_lt <- emmeans(tj_aovs[["lt"]], c("train_type", "switch"))
tj_contrasts_lt <- contrast(tj_emm_int_lt, train_post_hoc_cs, adjust="scheffe")
write.csv(tj_contrasts_lt, paste(res_path, 'task_jumps_post_hoc.csv', sep=""), row.names=FALSE)
head(tj_aov_dat)
# first set the factors to be factors
jumps$sub <- as.factor(jumps$sub)
jumps$train_type <- as.factor(jumps$train_type)
levels(jumps$train_type) <- c('stable','variable')
jumps$switch <- as.factor(jumps$switch)
levels(jumps$switch) <- c('stay','switch')
# now run the ANOVA model
# set emmeans option to multivariate
afex_options(emmeans_model = "multivariate")
# perform the statistical model
exp_strs <- unique(jumps$exp)
tj_aovs <- lapply(exp_strs, function(x)
aov_ez("sub", "jumps", jumps %>% filter(exp == x),
within = "switch",
between = "train_type"))
names(tj_aovs) <- exp_strs
# convert the anovas to a dataframe, save the results and show as a table
convert_aov_to_df <- function(aovl, exp_str){
ref = aovl$anova_table
tibble(exp = rep(exp_str, length(ref$F)),
effect = rownames(ref),
numDF = ref$`num Df`,
denDF = ref$`den Df`,
Fstat = ref$F,
ges = ref$ges,
p = ref$`Pr(>F)`)
}
tj_aov_dat <- do.call(rbind,
lapply(1:length(exp_strs),
function(x) convert_aov_to_df(tj_aovs[[x]],
exp_strs[x])))
write.csv(tj_aov_dat, paste(res_path, 'task_jumps_aov.csv', sep=""), row.names=tj_aov_dat[,1], col.names=tj_aov_dat[1,])
tj_aov_dat[,1]
# first set the factors to be factors
jumps$sub <- as.factor(jumps$sub)
jumps$train_type <- as.factor(jumps$train_type)
levels(jumps$train_type) <- c('stable','variable')
jumps$switch <- as.factor(jumps$switch)
levels(jumps$switch) <- c('stay','switch')
# now run the ANOVA model
# set emmeans option to multivariate
afex_options(emmeans_model = "multivariate")
# perform the statistical model
exp_strs <- unique(jumps$exp)
tj_aovs <- lapply(exp_strs, function(x)
aov_ez("sub", "jumps", jumps %>% filter(exp == x),
within = "switch",
between = "train_type"))
names(tj_aovs) <- exp_strs
# convert the anovas to a dataframe, save the results and show as a table
convert_aov_to_df <- function(aovl, exp_str){
ref = aovl$anova_table
tibble(exp = rep(exp_str, length(ref$F)),
effect = rownames(ref),
numDF = ref$`num Df`,
denDF = ref$`den Df`,
Fstat = ref$F,
ges = ref$ges,
p = ref$`Pr(>F)`)
}
tj_aov_dat <- do.call(rbind,
lapply(1:length(exp_strs),
function(x) convert_aov_to_df(tj_aovs[[x]],
exp_strs[x])))
write.csv(tj_aov_dat, paste(res_path, 'task_jumps_aov.csv', sep=""), row.names=tj_aov_dat$exp, col.names=c("exp", "effect", "numDF", "denDF", "Fstat", "ges", "p"))
# first set the factors to be factors
jumps$sub <- as.factor(jumps$sub)
jumps$train_type <- as.factor(jumps$train_type)
levels(jumps$train_type) <- c('stable','variable')
jumps$switch <- as.factor(jumps$switch)
levels(jumps$switch) <- c('stay','switch')
# now run the ANOVA model
# set emmeans option to multivariate
afex_options(emmeans_model = "multivariate")
# perform the statistical model
exp_strs <- unique(jumps$exp)
tj_aovs <- lapply(exp_strs, function(x)
aov_ez("sub", "jumps", jumps %>% filter(exp == x),
within = "switch",
between = "train_type"))
names(tj_aovs) <- exp_strs
# convert the anovas to a dataframe, save the results and show as a table
convert_aov_to_df <- function(aovl, exp_str){
ref = aovl$anova_table
tibble(exp = rep(exp_str, length(ref$F)),
effect = rownames(ref),
numDF = ref$`num Df`,
denDF = ref$`den Df`,
Fstat = ref$F,
ges = ref$ges,
p = ref$`Pr(>F)`)
}
tj_aov_dat <- do.call(rbind,
lapply(1:length(exp_strs),
function(x) convert_aov_to_df(tj_aovs[[x]],
exp_strs[x])))
write.csv(tj_aov_dat, paste(res_path, 'task_jumps_aov.csv', sep=""), row.names=FALSE)
# first set the factors to be factors
jumps$sub <- as.factor(jumps$sub)
jumps$train_type <- as.factor(jumps$train_type)
levels(jumps$train_type) <- c('stable','variable')
jumps$switch <- as.factor(jumps$switch)
levels(jumps$switch) <- c('stay','switch')
# now run the ANOVA model
# set emmeans option to multivariate
afex_options(emmeans_model = "multivariate")
# perform the statistical model
exp_strs <- unique(jumps$exp)
tj_aovs <- lapply(exp_strs, function(x)
aov_ez("sub", "jumps", jumps %>% filter(exp == x),
within = "switch",
between = "train_type"))
names(tj_aovs) <- exp_strs
# convert the anovas to a dataframe, save the results and show as a table
convert_aov_to_df <- function(aovl, exp_str){
ref = aovl$anova_table
tibble(exp = rep(exp_str, length(ref$F)),
effect = rownames(ref),
numDF = ref$`num Df`,
denDF = ref$`den Df`,
Fstat = ref$F,
ges = ref$ges,
p = ref$`Pr(>F)`)
}
tj_aov_dat <- do.call(rbind,
lapply(1:length(exp_strs),
function(x) convert_aov_to_df(tj_aovs[[x]],
exp_strs[x])))
write.csv(tj_aov_dat, paste(res_path, 'task_jumps_aov.csv', sep=""), row.names=FALSE)
train_ph_btwns <- list("stable" = c(-1, 0, 1, 0), # switch > stay for stable group
"variable" = c(0, -1, 0, 1))
train_ph_win <- list("grp_stay" = c(-1, 1, 0, 0), # var > stab
"grp_switch" = c(0, 0, -1, 1))
train_ph_win
train_ph_win <- list("stable" = c(-1, 0, 1, 0), # switch > stay for stable group
"variable" = c(0, -1, 0, 1))
train_ph_btwn <- list("grp_stay" = c(-1, 1, 0, 0), # var > stab
"grp_switch" = c(0, 0, -1, 1))
train_ph_win <- list("stable" = c(-1, 0, 1, 0), # switch > stay for stable group
"variable" = c(0, -1, 0, 1))
train_ph_btwn <- list("grp_stay" = c(-1, 1, 0, 0), # var > stab
"grp_switch" = c(0, 0, -1, 1))
tj_emm_int_lt <- emmeans(tj_aovs[["lt"]], c("train_type", "switch"))
tj_contrasts_win_lt <- contrast(tj_emm_int_lt, train_ph_win, adjust="scheffe")
tj_contrasts_btwn_lt <- contrast(tj_emm_int_lt, train_ph_btwn, adjust="scheffe")
# write.csv(tj_contrasts_lt, paste(res_path, 'task_jumps_post_hoc.csv', sep=""), row.names=FALSE)
tj_contrasts_win_lt
tj_contrasts_btwn_lt
train_ph_win <- list("stable" = c(-1, 0, 1, 0), # switch > stay for stable group
"variable" = c(0, -1, 0, 1))
train_ph_btwn <- list("grp_stay" = c(-1, 1, 0, 0), # var > stab
"grp_switch" = c(0, 0, -1, 1))
tj_emm_int_lt <- emmeans(tj_aovs[["lt"]], c("train_type", "switch"))
tj_contrasts_win_lt <- contrast(tj_emm_int_lt, train_ph_win, adjust="scheffe")
tj_contrasts_btwn_lt <- contrast(tj_emm_int_lt, train_ph_btwn, adjust="scheffe")
write.csv(rbind(tj_contrasts_win_lt, tj_contrasts_btwn_lt), paste(res_path, 'task_jumps_post_hoc.csv', sep=""), row.names=FALSE)
train_ph_win <- list("stable_sw_v_st" = c(-1, 0, 1, 0), # switch > stay for stable group
"variable_sw_v_st" = c(0, -1, 0, 1))
train_ph_btwn <- list("grp_stay" = c(-1, 1, 0, 0), # var > stab
"grp_switch" = c(0, 0, -1, 1))
tj_emm_int_lt <- emmeans(tj_aovs[["lt"]], c("train_type", "switch"))
tj_contrasts_win_lt <- contrast(tj_emm_int_lt, train_ph_win, adjust="scheffe")
tj_contrasts_btwn_lt <- contrast(tj_emm_int_lt, train_ph_btwn, adjust="scheffe")
write.csv(rbind(tj_contrasts_win_lt, tj_contrasts_btwn_lt), paste(res_path, 'task_jumps_post_hoc.csv', sep=""), row.names=FALSE)
paste(tj_aov_dat$exp, tj_aov_dat$effect)
paste(tj_aov_dat$exp, tj_aov_dat$effect, sep="_")
# first set the factors to be factors
jumps$sub <- as.factor(jumps$sub)
jumps$train_type <- as.factor(jumps$train_type)
levels(jumps$train_type) <- c('stable','variable')
jumps$switch <- as.factor(jumps$switch)
levels(jumps$switch) <- c('stay','switch')
# now run the ANOVA model
# set emmeans option to multivariate
afex_options(emmeans_model = "multivariate")
# perform the statistical model
exp_strs <- unique(jumps$exp)
tj_aovs <- lapply(exp_strs, function(x)
aov_ez("sub", "jumps", jumps %>% filter(exp == x),
within = "switch",
between = "train_type"))
names(tj_aovs) <- exp_strs
# convert the anovas to a dataframe, save the results and show as a table
convert_aov_to_df <- function(aovl, exp_str){
ref = aovl$anova_table
tibble(exp = rep(exp_str, length(ref$F)),
effect = rownames(ref),
numDF = ref$`num Df`,
denDF = ref$`den Df`,
Fstat = ref$F,
ges = ref$ges,
p = ref$`Pr(>F)`)
}
tj_aov_dat <- do.call(rbind,
lapply(1:length(exp_strs),
function(x) convert_aov_to_df(tj_aovs[[x]],
exp_strs[x])))
tj_aov_dat$id <- paste(tj_aov_dat$exp, tj_aov_dat$effect, sep="_")
write.csv(tj_aov_dat, paste(res_path, 'task_jumps_aov.csv', sep=""), row.names=FALSE)
# first set the factors to be factors
jumps$sub <- as.factor(jumps$sub)
jumps$train_type <- as.factor(jumps$train_type)
levels(jumps$train_type) <- c('stable','variable')
jumps$switch <- as.factor(jumps$switch)
levels(jumps$switch) <- c('stay','switch')
# now run the ANOVA model
# set emmeans option to multivariate
afex_options(emmeans_model = "multivariate")
# perform the statistical model
exp_strs <- unique(jumps$exp)
tj_aovs <- lapply(exp_strs, function(x)
aov_ez("sub", "jumps", jumps %>% filter(exp == x),
within = "switch",
between = "train_type"))
names(tj_aovs) <- exp_strs
# convert the anovas to a dataframe, save the results and show as a table
convert_aov_to_df <- function(aovl, exp_str){
ref = aovl$anova_table
tibble(exp = rep(exp_str, length(ref$F)),
effect = rownames(ref),
numDF = ref$`num Df`,
denDF = ref$`den Df`,
Fstat = ref$F,
ges = ref$ges,
p = ref$`Pr(>F)`)
}
tj_aov_dat <- do.call(rbind,
lapply(1:length(exp_strs),
function(x) convert_aov_to_df(tj_aovs[[x]],
exp_strs[x])))
tj_aov_dat$id <- paste(tj_aov_dat$exp, tj_aov_dat$effect, sep="_")
write.csv(tj_aov_dat, paste(res_path, 'task_jumps_aov.csv', sep=""), row.names=FALSE)
head(tj_aov_dat)
# first set the factors to be factors
jumps$sub <- as.factor(jumps$sub)
jumps$train_type <- as.factor(jumps$train_type)
levels(jumps$train_type) <- c('stable','variable')
jumps$switch <- as.factor(jumps$switch)
levels(jumps$switch) <- c('stay','switch')
# now run the ANOVA model
# set emmeans option to multivariate
afex_options(emmeans_model = "multivariate")
# perform the statistical model
exp_strs <- unique(jumps$exp)
tj_aovs <- lapply(exp_strs, function(x)
aov_ez("sub", "jumps", jumps %>% filter(exp == x),
within = "switch",
between = "train_type"))
names(tj_aovs) <- exp_strs
# convert the anovas to a dataframe, save the results and show as a table
convert_aov_to_df <- function(aovl, exp_str){
ref = aovl$anova_table
tibble(exp = rep(exp_str, length(ref$F)),
effect = rownames(ref),
numDF = ref$`num Df`,
denDF = ref$`den Df`,
Fstat = ref$F,
ges = ref$ges,
p = ref$`Pr(>F)`)
}
tj_aov_dat <- do.call(rbind,
lapply(1:length(exp_strs),
function(x) convert_aov_to_df(tj_aovs[[x]],
exp_strs[x])))
# do some manual rounding of columns
tj_aov_dat$Fstat <- round(tj_aov_dat$Fstat, 2)
tj_aov_dat$ges <- round(tj_aov_dat$ges, 3)
tj_aov_dat$p <- round(tj_aov_dat$p, 3)
# now an id column for referencing in overleaf
tj_aov_dat$id <- paste(tj_aov_dat$exp, tj_aov_dat$effect, sep="_")
write.csv(tj_aov_dat, paste(res_path, 'task_jumps_aov.csv', sep=""), row.names=FALSE)
options(tidyverse.quiet = TRUE)
library(tidyverse)
library(grid)
library(gridExtra)
library(knitr)
library(magick)
library(ggpubr)
library(vioplot)
library(rstatix)
library(emmeans)
library(afex)
library(pdftools)
library(purrr)
library(GGally)
data_path = 'data-wrangled/' # for all data derivs
fig_path = 'figs/' # for figures
res_path = 'res/' # for inferential results
function_loc <- "R" # where are the functions?
req_functions <- list.files(function_loc)
sapply(req_functions, function(x) source(paste(here::here(function_loc),
x, sep="/")))
# # now some font settings
library(extrafont)
#font_import() # run this once only, comment out after first time
loadfonts(device='pdf')
## now some variables that will help us run code across both experiments
exp_strs <- c('lt','ts')
j_wdth <- 10
j_hgt <- j_wdth*(6/10)
options(tidyverse.quiet = TRUE)
library(tidyverse)
library(grid)
library(gridExtra)
library(knitr)
library(magick)
library(ggpubr)
library(vioplot)
library(rstatix)
library(emmeans)
library(afex)
library(pdftools)
library(purrr)
library(GGally)
data_path = 'data-wrangled/' # for all data derivs
fig_path = 'figs/' # for figures
res_path = 'res/' # for inferential results
function_loc <- "R" # where are the functions?
req_functions <- list.files(function_loc)
sapply(req_functions, function(x) source(paste(here::here(function_loc),
x, sep="/")))
# # now some font settings
library(extrafont)
#font_import() # run this once only, comment out after first time
loadfonts(device='pdf')
## now some variables that will help us run code across both experiments
exp_strs <- c('lt','ts')
j_wdth <- 10
j_hgt <- j_wdth*(6/10)
# first, get the task jump data - note that I am not saving it as a csv,
# as it already exists with all the relevant info in the _avg csv
get_jump_data <- function(exp_str, data_path){
tmp <- read.csv(paste(data_path, 'exp_', exp_str,
'_avg.csv', sep='')) %>%
filter(ses == 2) %>%
select(sub, train_type, context, switch, context_changes) %>%
group_by(sub, train_type, switch) %>%
summarise(jumps=mean(context_changes)) %>%
ungroup()
tmp$exp = exp_str
tmp
}
jumps <- do.call(rbind, lapply(exp_strs, get_jump_data,
data_path = data_path))
col_scheme = c('#7570b3', '#e7298a')
gen_jumps_plot(jumps,
'jumps ~ switch*train_type',
exp_strs,
col_scheme,
j_wdth, j_hgt,
paste(fig_path, 'task-jumps', sep=''),
fig_labs = c('A', 'B'),
ylabel = 'Jumps',
xlabel = 'Group',
ylims=c(0,5))
# first set the factors to be factors
jumps$sub <- as.factor(jumps$sub)
jumps$train_type <- as.factor(jumps$train_type)
levels(jumps$train_type) <- c('stable','variable')
jumps$switch <- as.factor(jumps$switch)
levels(jumps$switch) <- c('stay','switch')
# now run the ANOVA model
# set emmeans option to multivariate
afex_options(emmeans_model = "multivariate")
# perform the statistical model
exp_strs <- unique(jumps$exp)
tj_aovs <- lapply(exp_strs, function(x)
aov_ez("sub", "jumps", jumps %>% filter(exp == x),
within = "switch",
between = "train_type"))
names(tj_aovs) <- exp_strs
# convert the anovas to a dataframe, save the results and show as a table
convert_aov_to_df <- function(aovl, exp_str){
ref = aovl$anova_table
tibble(exp = rep(exp_str, length(ref$F)),
effect = rownames(ref),
numDF = ref$`num Df`,
denDF = ref$`den Df`,
Fstat = ref$F,
ges = ref$ges,
p = ref$`Pr(>F)`)
}
tj_aov_dat <- do.call(rbind,
lapply(1:length(exp_strs),
function(x) convert_aov_to_df(tj_aovs[[x]],
exp_strs[x])))
# do some manual rounding of columns
tj_aov_dat$Fstat <- round(tj_aov_dat$Fstat, 2)
tj_aov_dat$ges <- round(tj_aov_dat$ges, 3)
tj_aov_dat$p <- round(tj_aov_dat$p, 3)
# now an id column for referencing in overleaf
tj_aov_dat$id <- paste(tj_aov_dat$exp, tj_aov_dat$effect, sep="_")
write.csv(tj_aov_dat, paste(res_path, 'task_jumps_aov.csv', sep=""), row.names=FALSE)
train_ph_win <- list("stable_sw_v_st" = c(-1, 0, 1, 0), # switch > stay for stable group
"variable_sw_v_st" = c(0, -1, 0, 1))
train_ph_btwn <- list("grp_stay" = c(-1, 1, 0, 0), # var > stab
"grp_switch" = c(0, 0, -1, 1))
tj_emm_int_lt <- emmeans(tj_aovs[["lt"]], c("train_type", "switch"))
tj_contrasts_win_lt <- contrast(tj_emm_int_lt, train_ph_win, adjust="scheffe")
tj_contrasts_btwn_lt <- contrast(tj_emm_int_lt, train_ph_btwn, adjust="scheffe")
tj_contrasts_lt <- summary(rbind(tj_contrasts_win_lt, tj_contrasts_btwn_lt))
tj_contrasts_lt$estimate <- round(tj_contrasts_lt$estimate, 2)
tj_contrasts_lt$SE <- round(tj_contrasts_lt$SE, 2)
tj_contrasts_lt$p.value <- round(tj_contrasts_lt$p.value, 2)
tj_contrasts_lt$Fstat <- round(tj_contrasts_lt$t.ratio^2, 2)
write.csv(tj_contrasts_lt, paste(res_path, 'task_jumps_post_hoc_lt.csv', sep=""), row.names=FALSE)
tj_emm_int_lt <- summary(tj_emm_int_lt)
tj_emm_int_lt$emmean <- round(tj_emm_int_lt$emmean,2)
tj_emm_int_lt$SE <- round(tj_emm_int_lt$SE,2)
tj_emm_int_lt$id <- paste(tj_emm_int_lt$train_type, tj_emm_int_lt$switch, sep="_")
write.csv(tj_emm_int_lt, paste(res_path, 'task_jumps_emms_lt.csv', sep=""), row.names=FALSE)
# get general errors data
get_error_data <- function(exp_str, data_path){
tmp <- read.csv(paste(data_path, 'exp_', exp_str,
'_avg.csv', sep='')) %>%
filter(ses == 2) %>%
select(sub, train_type, context, switch, general_errors) %>%
group_by(sub, train_type, switch) %>%
summarise(errors=mean(general_errors)) %>%
ungroup()
tmp$exp = exp_str
tmp
}
errors <- do.call(rbind, lapply(exp_strs, get_error_data,
data_path = data_path))
gen_jumps_plot(errors,
'errors ~ switch*train_type',
exp_strs,
col_scheme,
j_wdth, j_hgt,
paste(fig_path, 'general-errors', sep=''),
fig_labs = c('C', 'D'),
ylabel = 'Errors',
ylims=c(0,1),
xlabel = 'Group')
options(tidyverse.quiet = TRUE)
library(tidyverse)
library(grid)
library(gridExtra)
library(knitr)
library(magick)
library(ggpubr)
library(vioplot)
library(rstatix)
library(emmeans)
library(afex)
library(pdftools)
library(purrr)
library(GGally)
data_path = 'data-wrangled/' # for all data derivs
fig_path = 'figs/' # for figures
res_path = 'res/' # for inferential results
function_loc <- "R" # where are the functions?
req_functions <- list.files(function_loc)
sapply(req_functions, function(x) source(paste(here::here(function_loc),
x, sep="/")))
# # now some font settings
library(extrafont)
#font_import() # run this once only, comment out after first time
loadfonts(device='pdf')
## now some variables that will help us run code across both experiments
exp_strs <- c('lt','ts')
j_wdth <- 10
j_hgt <- j_wdth*(6/10)
