"0",""
"0","###### nopw sort this code"
"0","# wrangle data"
"0","onset_dat <- read.csv(paste(data_path, 'exp_lt_maggi-k4.csv', sep='')) %>% "
"0","  select(sid, ses, transfer, k4_onset) %>% "
"0","  filter(ses == 3) %>%"
"0","  mutate(transfer=recode(transfer, `1` = 'comp', `2` = 'part')) "
"0","names(onset_dat)[names(onset_dat) == ""sid""] = ""sub"""
"0",""
"0","# now I get the group info"
"0","grp_inf <- read.csv(paste(data_path, 'exp_lt_avg.csv', sep='')) %>% "
"0","  filter(ses == 3) %>%"
"0","  select(sub, train_type) %>%"
"0","  unique()"
"0","onset_dat <- inner_join(onset_dat, grp_inf, by='sub') %>%"
"0","                mutate(train_type=recode(train_type, `1`= 'stable', "
"0","                                         `2` = 'variable'))"
"0","rm(grp_inf)"
"0",""
"0","# some participants never learned, so we lose anyone who has a k4 of NaN,"
"0","# as that means their score was Inf"
"0","# remove participants for whom we couldn't determine learned"
"0","non_learn <- onset_dat %>% filter(is.infinite(k4_onset)) %>% "
"0","                select(sub, train_type) %>% distinct()"
"0","onset_dat <- onset_dat %>% na.omit() %>%"
"0","                filter(is.finite(k4_onset))"
"0",""
"0","# need to show that the probability of being excluded did not relate to group membership"
"0","non_learn_prob <- binom.test(sum(non_learn$train_type == ""stable""), length(non_learn$train_type), 0.5)"
"0","non_learn_prob <- tibble(n_stable = non_learn_prob$statistic,"
"0","                         n_var = non_learn_prob$parameter - non_learn_prob$statistic,"
"0","                         total = n_stable + n_var,"
"0","                         n_total = 100 - total,"
"0","                         p = round(non_learn_prob$p.value, 2),"
"0","                         id = ""val"")"
"0","write.csv(non_learn_prob, paste(res_path, 'non_learn_grp_mem.csv', sep=""""), row.names=FALSE)"
"0","# Now I have the data, I want to replace any outliers with NA and save the resulting data file"
"0","dvs <- c('k4_onset')"
"0","onset_dat <- cbind(onset_dat,"
"0","         do.call(cbind, lapply(dvs, remove_outliers, betas=onset_dat)))"
